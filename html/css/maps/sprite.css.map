{"version":3,"file":"sprite.css","sources":["sprite.scss"],"sourcesContent":["/*\nSCSS variables are information about icon's compiled state, stored under its original file name\n\n.icon-home {\n  width: $icon-home-width;\n}\n\nThe large array-like variables contain all information about a single icon\n$icon-home: x y offset_x offset_y width height total_width total_height image_path;\n\nAt the bottom of this section, we provide information about the spritesheet itself\n$spritesheet: width height image $spritesheet-sprites;\n*/\n$sprite-blank-name: 'sprite-blank';\n$sprite-blank-x: 0px;\n$sprite-blank-y: 0px;\n$sprite-blank-offset-x: 0px;\n$sprite-blank-offset-y: 0px;\n$sprite-blank-width: 1px;\n$sprite-blank-height: 1px;\n$sprite-blank-total-width: 1px;\n$sprite-blank-total-height: 1px;\n$sprite-blank-image: '../img/sprite.png';\n$sprite-blank: (0px, 0px, 0px, 0px, 1px, 1px, 1px, 1px, '../img/sprite.png', 'sprite-blank', );\n$spritesheet-width: 1px;\n$spritesheet-height: 1px;\n$spritesheet-image: '../img/sprite.png';\n$spritesheet-sprites: ($sprite-blank, );\n$spritesheet: (1px, 1px, '../img/sprite.png', $spritesheet-sprites, );\n\n/*\nThe provided mixins are intended to be used with the array-like variables\n\n.icon-home {\n  @include sprite-width($icon-home);\n}\n\n.icon-email {\n  @include sprite($icon-email);\n}\n\nExample usage in HTML:\n\n`display: block` sprite:\n<div class=\"icon-home\"></div>\n\nTo change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n\n// CSS\n.icon {\n  display: inline-block;\n}\n\n// HTML\n<i class=\"icon icon-home\"></i>\n*/\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n/*\nThe `sprites` mixin generates identical output to the CSS template\n  but can be overridden inside of SCSS\n\n@include sprites($spritesheet-sprites);\n*/\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n"],"mappings":"","names":[],"sourceRoot":"/source/"}