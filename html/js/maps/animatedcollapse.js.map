{"version":3,"sources":["animatedcollapse.js"],"names":["animatedcollapse","divholders","divgroups","lastactiveingroup","preloadimages","show","divids","i","length","this","showhide","hide","toggle","divid","addDiv","attrstring","id","$divref","attrs","getAttr","name","attr","RegExp","test","parseInt","$1","currentid","action","targetgroup","count","css","lastactivedivid","slideengine","$togglerimage","animateSetting","height","opacity","animate","data","closed","open","ontoggle","jQuery","get","e","alert","generatemap","map","arguments","init","ac","document","ready","$","urlparamopenids","urlparamselect","persistopenids","getCookie","groupswithpersist","split","each","inArray","cssdisplay","overridepersist","display","$allcontrols","filter","_divids","getAttribute","replace","getElementsByTagName","preloadimage","find","eq","click","relattr","window","bind","uninit","opendivids","setCookie","Name","re","cookie","match","value","days","expireDate","Date","setDate","getDate","toGMTString","location","search","Image","src"],"mappings":"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","file":"animatedcollapse.js","sourcesContent":["//** Animated Collapsible DIV v2.0- (c) Dynamic Drive DHTML code library: http://www.dynamicdrive.com.\n//** May 24th, 08'- Script rewritten and updated to 2.0.\n//** June 4th, 08'- Version 2.01: Bug fix to work with jquery 1.2.6 (which changed the way attr() behaves).\n//** March 5th, 09'- Version 2.2, which adds the following:\n\t\t\t//1) ontoggle($, divobj, state) event that fires each time a DIV is expanded/collapsed, including when the page 1st loads\n\t\t\t//2) Ability to expand a DIV via a URL parameter string, ie: index.htm?expanddiv=jason or index.htm?expanddiv=jason,kelly\n\n//** March 9th, 09'- Version 2.2.1: Optimized ontoggle event handler slightly.\n//** July 3rd, 09'- Version 2.4, which adds the following:\n\t\t\t//1) You can now insert rel=\"expand[divid] | collapse[divid] | toggle[divid]\" inside arbitrary links to act as DIV togglers\n\t\t\t//2) For image toggler links, you can insert the attributes \"data-openimage\" and \"data-closedimage\" to update its image based on the DIV state\n\nvar animatedcollapse={\ndivholders: {}, //structure: {div.id, div.attrs, div.$divref, div.$togglerimage}\ndivgroups: {}, //structure: {groupname.count, groupname.lastactivedivid}\nlastactiveingroup: {}, //structure: {lastactivediv.id}\npreloadimages: [],\n\nshow:function(divids){ //public method\n\tif (typeof divids==\"object\"){\n\t\tfor (var i=0; i<divids.length; i++)\n\t\t\tthis.showhide(divids[i], \"show\")\n\t}\n\telse\n\t\tthis.showhide(divids, \"show\")\n},\n\nhide:function(divids){ //public method\n\tif (typeof divids==\"object\"){\n\t\tfor (var i=0; i<divids.length; i++)\n\t\t\tthis.showhide(divids[i], \"hide\")\n\t}\n\telse\n\t\tthis.showhide(divids, \"hide\")\n},\n\ntoggle:function(divid){ //public method\n\tif (typeof divid==\"object\")\n\t\tdivid=divid[0]\n\tthis.showhide(divid, \"toggle\")\n},\n\naddDiv:function(divid, attrstring){ //public function\n\tthis.divholders[divid]=({id: divid, $divref: null, attrs: attrstring})\n\tthis.divholders[divid].getAttr=function(name){ //assign getAttr() function to each divholder object\n\t\tvar attr=new RegExp(name+\"=([^,]+)\", \"i\") //get name/value config pair (ie: width=400px,)\n\t\treturn (attr.test(this.attrs) && parseInt(RegExp.$1)!=0)? RegExp.$1 : null //return value portion (string), or 0 (false) if none found\n\t}\n\tthis.currentid=divid //keep track of current div object being manipulated (in the event of chaining)\n\treturn this\n},\n\nshowhide:function(divid, action){\n\tvar $divref=this.divholders[divid].$divref //reference collapsible DIV\n\tif (this.divholders[divid] && $divref.length==1){ //if DIV exists\n\t\tvar targetgroup=this.divgroups[$divref.attr('groupname')] //find out which group DIV belongs to (if any)\n\t\tif ($divref.attr('groupname') && targetgroup.count>1 && (action==\"show\" || action==\"toggle\" && $divref.css('display')=='none')){ //If current DIV belongs to a group\n\t\t\tif (targetgroup.lastactivedivid && targetgroup.lastactivedivid!=divid) //if last active DIV is set\n\t\t\t\tthis.slideengine(targetgroup.lastactivedivid, 'hide') //hide last active DIV within group first\n\t\t\t\tthis.slideengine(divid, 'show')\n\t\t\ttargetgroup.lastactivedivid=divid //remember last active DIV\n\t\t}\n\t\telse{\n\t\t\tthis.slideengine(divid, action)\n\t\t}\n\t}\n},\n\nslideengine:function(divid, action){\n\tvar $divref=this.divholders[divid].$divref\n\tvar $togglerimage=this.divholders[divid].$togglerimage\n\tif (this.divholders[divid] && $divref.length==1){ //if this DIV exists\n\t\tvar animateSetting={height: action}\n\t\tif ($divref.attr('fade'))\n\t\t\tanimateSetting.opacity=action\n\t\t$divref.animate(animateSetting, $divref.attr('speed')? parseInt($divref.attr('speed')) : 500, function(){\n\t\t\tif ($togglerimage){\n\t\t\t\t$togglerimage.attr('src', ($divref.css('display')==\"none\")? $togglerimage.data('srcs').closed : $togglerimage.data('srcs').open)\n\t\t\t}\n\t\t\tif (animatedcollapse.ontoggle){\n\t\t\t\ttry{\n\t\t\t\t\tanimatedcollapse.ontoggle(jQuery, $divref.get(0), $divref.css('display'))\n\t\t\t\t}\n\t\t\t\tcatch(e){\n\t\t\t\t\talert(\"An error exists inside your \\\"ontoggle\\\" function:\\n\\n\"+e+\"\\n\\nAborting execution of function.\")\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t\treturn false\n\t}\n},\n\ngeneratemap:function(){\n\tvar map={}\n\tfor (var i=0; i<arguments.length; i++){\n\t\tif (arguments[i][1]!=null){ //do not generate name/value pair if value is null\n\t\t\tmap[arguments[i][0]]=arguments[i][1]\n\t\t}\n\t}\n\treturn map\n},\n\ninit:function(){\n\tvar ac=this\n\tjQuery(document).ready(function($){\n\t\tanimatedcollapse.ontoggle=animatedcollapse.ontoggle || null\n\t\tvar urlparamopenids=animatedcollapse.urlparamselect() //Get div ids that should be expanded based on the url (['div1','div2',etc])\n\t\tvar persistopenids=ac.getCookie('acopendivids') //Get list of div ids that should be expanded due to persistence ('div1,div2,etc')\n\t\tvar groupswithpersist=ac.getCookie('acgroupswithpersist') //Get list of group names that have 1 or more divs with \"persist\" attribute defined\n\t\tif (persistopenids!=null) //if cookie isn't null (is null if first time page loads, and cookie hasnt been set yet)\n\t\t\tpersistopenids=(persistopenids=='nada')? [] : persistopenids.split(',') //if no divs are persisted, set to empty array, else, array of div ids\n\t\tgroupswithpersist=(groupswithpersist==null || groupswithpersist=='nada')? [] : groupswithpersist.split(',') //Get list of groups with divs that are persisted\n\t\tjQuery.each(ac.divholders, function(){ //loop through each collapsible DIV object\n\t\t\tthis.$divref=$('#'+this.id)\n\t\t\tif ((this.getAttr('persist') || jQuery.inArray(this.getAttr('group'), groupswithpersist)!=-1) && persistopenids!=null){ //if this div carries a user \"persist\" setting, or belong to a group with at least one div that does\n\t\t\t\tvar cssdisplay=(jQuery.inArray(this.id, persistopenids)!=-1)? 'block' : 'none'\n\t\t\t}\n\t\t\telse{\n\t\t\t\tvar cssdisplay=this.getAttr('hide')? 'none' : null\n\t\t\t}\n\t\t\tif (urlparamopenids[0]==\"all\" || jQuery.inArray(this.id, urlparamopenids)!=-1){ //if url parameter string contains the single array element \"all\", or this div's ID\n\t\t\t\tcssdisplay='block' //set div to \"block\", overriding any other setting\n\t\t\t}\n\t\t\telse if (urlparamopenids[0]==\"none\"){\n\t\t\t\tcssdisplay='none' //set div to \"none\", overriding any other setting\n\t\t\t}\n\t\t\tthis.$divref.css(ac.generatemap(['height', this.getAttr('height')], ['display', cssdisplay]))\n\t\t\tthis.$divref.attr(ac.generatemap(['groupname', this.getAttr('group')], ['fade', this.getAttr('fade')], ['speed', this.getAttr('speed')]))\n\t\t\tif (this.getAttr('group')){ //if this DIV has the \"group\" attr defined\n\t\t\t\tvar targetgroup=ac.divgroups[this.getAttr('group')] || (ac.divgroups[this.getAttr('group')]={}) //Get settings for this group, or if it no settings exist yet, create blank object to store them in\n\t\t\t\ttargetgroup.count=(targetgroup.count||0)+1 //count # of DIVs within this group\n\t\t\t\tif (jQuery.inArray(this.id, urlparamopenids)!=-1){ //if url parameter string contains this div's ID\n\t\t\t\t\ttargetgroup.lastactivedivid=this.id //remember this DIV as the last \"active\" DIV (this DIV will be expanded). Overrides other settings\n\t\t\t\t\ttargetgroup.overridepersist=1 //Indicate to override persisted div that would have been expanded\n\t\t\t\t}\n\t\t\t\tif (!targetgroup.lastactivedivid && this.$divref.css('display')!='none' || cssdisplay==\"block\" && typeof targetgroup.overridepersist==\"undefined\") //if this DIV was open by default or should be open due to persistence\t\t\t\t\t\t\t\t\n\t\t\t\t\ttargetgroup.lastactivedivid=this.id //remember this DIV as the last \"active\" DIV (this DIV will be expanded)\n\t\t\t\tthis.$divref.css({display:'none'}) //hide any DIV that's part of said group for now\n\t\t\t}\n\t\t}) //end divholders.each\n\t\tjQuery.each(ac.divgroups, function(){ //loop through each group\n\t\t\tif (this.lastactivedivid && urlparamopenids[0]!=\"none\") //show last \"active\" DIV within each group (one that should be expanded), unless url param=\"none\"\n\t\t\t\tac.divholders[this.lastactivedivid].$divref.show()\n\t\t})\n\t\tif (animatedcollapse.ontoggle){\n\t\t\tjQuery.each(ac.divholders, function(){ //loop through each collapsible DIV object and fire ontoggle event\n\t\t\t\tanimatedcollapse.ontoggle(jQuery, this.$divref.get(0), this.$divref.css('display'))\n\t\t\t})\n\t\t}\n \t\t//Parse page for links containing rel attribute\n\t\tvar $allcontrols=$('a[rel]').filter('[rel^=\"collapse[\"], [rel^=\"expand[\"], [rel^=\"toggle[\"]') //get all elements on page with rel=\"collapse[]\", \"expand[]\" and \"toggle[]\"\n\t\t$allcontrols.each(function(){ //loop though each control link\n\t\t\tthis._divids=this.getAttribute('rel').replace(/(^\\w+)|(\\s+)/g, \"\").replace(/[\\[\\]']/g, \"\") //cache value 'div1,div2,etc' within identifier[div1,div2,etc]\n\t\t\tif (this.getElementsByTagName('img').length==1 && ac.divholders[this._divids]){ //if control is an image link that toggles a single DIV (must be one to one to update status image)\n\t\t\t\tanimatedcollapse.preloadimage(this.getAttribute('data-openimage'), this.getAttribute('data-closedimage')) //preload control images (if defined)\n\t\t\t\t$togglerimage=$(this).find('img').eq(0).data('srcs', {open:this.getAttribute('data-openimage'), closed:this.getAttribute('data-closedimage')}) //remember open and closed images' paths\n\t\t\t\tac.divholders[this._divids].$togglerimage=$(this).find('img').eq(0) //save reference to toggler image (to be updated inside slideengine()\n\t\t\t\tac.divholders[this._divids].$togglerimage.attr('src', (ac.divholders[this._divids].$divref.css('display')==\"none\")? $togglerimage.data('srcs').closed : $togglerimage.data('srcs').open)\n\t\t\t}\n\t\t\t$(this).click(function(){ //assign click behavior to each control link\n\t\t\t\tvar relattr=this.getAttribute('rel')\n\t\t\t\tvar divids=(this._divids==\"\")? [] : this._divids.split(',') //convert 'div1,div2,etc' to array \n\t\t\t\tif (divids.length>0){\n\t\t\t\t\tanimatedcollapse[/expand/i.test(relattr)? 'show' : /collapse/i.test(relattr)? 'hide' : 'toggle'](divids) //call corresponding public function\n\t\t\t\t\treturn false\n\t\t\t\t}\n\t\t\t}) //end control.click\n\t\t})// end control.each\n\n\t\t$(window).bind('unload', function(){\n\t\t\tac.uninit()\n\t\t})\n\t}) //end doc.ready()\n},\n\nuninit:function(){\n\tvar opendivids='', groupswithpersist=''\n\tjQuery.each(this.divholders, function(){\n\t\tif (this.$divref.css('display')!='none'){\n\t\t\topendivids+=this.id+',' //store ids of DIVs that are expanded when page unloads: 'div1,div2,etc'\n\t\t}\n\t\tif (this.getAttr('group') && this.getAttr('persist'))\n\t\t\tgroupswithpersist+=this.getAttr('group')+',' //store groups with which at least one DIV has persistance enabled: 'group1,group2,etc'\n\t})\n\topendivids=(opendivids=='')? 'nada' : opendivids.replace(/,$/, '')\n\tgroupswithpersist=(groupswithpersist=='')? 'nada' : groupswithpersist.replace(/,$/, '')\n\tthis.setCookie('acopendivids', opendivids)\n\tthis.setCookie('acgroupswithpersist', groupswithpersist)\n},\n\ngetCookie:function(Name){ \n\tvar re=new RegExp(Name+\"=[^;]*\", \"i\"); //construct RE to search for target name/value pair\n\tif (document.cookie.match(re)) //if cookie found\n\t\treturn document.cookie.match(re)[0].split(\"=\")[1] //return its value\n\treturn null\n},\n\nsetCookie:function(name, value, days){\n\tif (typeof days!=\"undefined\"){ //if set persistent cookie\n\t\tvar expireDate = new Date()\n\t\texpireDate.setDate(expireDate.getDate()+days)\n\t\tdocument.cookie = name+\"=\"+value+\"; path=/; expires=\"+expireDate.toGMTString()\n\t}\n\telse //else if this is a session only cookie\n\t\tdocument.cookie = name+\"=\"+value+\"; path=/\"\n},\n\nurlparamselect:function(){\n\twindow.location.search.match(/expanddiv=([\\w\\-_,]+)/i) //search for expanddiv=divid or divid1,divid2,etc\n\treturn (RegExp.$1!=\"\")? RegExp.$1.split(\",\") : []\n},\n\npreloadimage:function(){\n\tvar preloadimages=this.preloadimages\n\tfor (var i=0; i<arguments.length; i++){\n\t\tif (arguments[i] && arguments[i].length>0){\n\t\t\tpreloadimages[preloadimages.length]=new Image()\n\t\t\tpreloadimages[preloadimages.length-1].src=arguments[i]\n\t\t}\n\t}\n}\n\n}"],"sourceRoot":"/source/"}